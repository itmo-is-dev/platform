name: "publish packages"

on:
  push:
    branches: [ "chore/publish-new" ]
    paths:
      - 'src/**'
      - '.github/workflows/publish-new*'
      - '*.props'
      - '!samples'

jobs:
  find-package-projects:
    name: "find csproj files with packages"
    runs-on: ubuntu-latest
    
    outputs:
      package-projects: ${{ steps.find-package-projects.outputs.package-projects }}
    
    steps:
      - uses: actions/checkout@v4

      - name: find package projects
        id: find-package-projects
        run: |
          package_projects=$(.github/workflows/publish-new-find-package-projects.sh | awk '{ printf("\"%s\", ", $1) }')
          package_projects=["$package_projects"]
          package_projects=$(echo "$package_projects" | sed 's/, ]/]/')
          
          echo "$package_projects"
          echo package-projects="$package_projects" >> "$GITHUB_OUTPUT"
          
          echo ${{ github.event.client_payload.versions }}
  
  check-package-project-changes:
    name: "check ${{ matrix.package-dir }}"
    runs-on: ubuntu-latest
    needs: find-package-projects
    
    strategy:
      matrix:
        package-dir: ${{ fromJSON(needs.find-package-projects.outputs.package-projects) }}
    
    outputs:
      package-changed-${{ matrix.package-dir }}: ${{ steps.check-changes.outputs.package-changed }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45

      - name: check for changed dependencies
        id: check-changes
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
          PACKAGE_DIR: ${{ matrix.package-dir }}
        run: |
          dependent_paths=$(.github/workflows/publish-new-find-csproj-dependencies.sh "$PACKAGE_DIR" | sort | uniq)
          
          for dependent_path in ${dependent_paths}
          do
            changes_count=$(echo "$ALL_CHANGED_FILES" | grep -Ec '"${dependent_path}")
          
            if [[ ! "$changes_count" -eq 0 ]]
            then
              echo package-changed=true >> "$GITHUB_OUTPUT"
              break
            fi
          done
          
          echo package-changed=false >> "$GITHUB_OUTPUT"

  handle-package-changes:
    name: handle package changes
    runs-on: ubuntu-latest
    needs: check-package-project-changes
    
    steps:
      - name: write outputs
        run: |
          echo ${{ toJSON(needs.check-package-project-changes.outputs) }}